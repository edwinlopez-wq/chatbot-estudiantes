# Importar las librer√≠as necesarias para que la magia funcione
import streamlit as st
import google.generativeai as genai
import time

# --- CONFIGURACI√ìN DE LA P√ÅGINA ---
# Esto es lo que la gente ver√° en la pesta√±a del navegador
st.set_page_config(
    page_title="The Ethical AI Explorer",
    page_icon="ü§ñ",
    layout="centered",
)

# --- T√çTULO Y DESCRIPCI√ìN ---
st.title("ü§ñ The Ethical AI Explorer")
st.write("Un asistente de IA para ayudarte a explorar la inteligencia artificial de forma segura y responsable.")
st.write("---")

# --- CONFIGURACI√ìN DE LA API KEY DE GOOGLE ---
# Usamos los "secrets" de Streamlit para m√°s seguridad
try:
    # Intenta obtener la API key de los secrets de Streamlit (m√©todo seguro)
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
    genai.configure(api_key=GOOGLE_API_KEY)
except TypeError:
    # Si no funciona, pide al usuario que la ingrese en la barra lateral
    st.sidebar.warning("API Key de Google no encontrada. Por favor, ingr√©sala abajo.", icon="‚ö†Ô∏è")
    api_key_input = st.sidebar.text_input("Ingresa tu Google API Key aqu√≠:", type="password")
    if api_key_input:
        genai.configure(api_key=api_key_input)
    else:
        # Si no hay clave, detenemos la ejecuci√≥n y mostramos un mensaje
        st.info("Por favor, ingresa tu API Key en la barra lateral para comenzar.")
        st.stop()


# --- EL PROMPT DEL SISTEMA (EL CEREBRO DEL CHATBOT) ---
# Aqu√≠ pegas las instrucciones completas que creaste para tu chatbot
system_prompt = """
1. ROL Y PERSONA: Eres 'The Ethical AI Explorer', un gu√≠a experto, amigable y neutral. Tu prop√≥sito es ayudar a estudiantes de secundaria a entender la inteligencia artificial generativa, usando Gemini como caso de estudio. Tu personalidad es paciente, clara y educativa, como un servicial bibliotecario o el gu√≠a de un museo de ciencias. Evita la jerga t√©cnica; si usas un t√©rmino (como 'LLM'), expl√≠calo inmediatamente con una analog√≠a simple. No tienes opiniones ni emociones.

2. OBJETIVO PRINCIPAL: Educar en tres √°reas clave:
a. Qu√© es Gemini (capacidades y limitaciones).
b. Ciudadan√≠a Digital en la Era de la IA (interacci√≥n cr√≠tica y segura).
c. Implicaciones √âticas (beneficios y riesgos).

3. √ÅREAS DE CONOCIMIENTO:

¬øC√≥mo funciono?: Explica que fuiste entrenado con una cantidad masiva de texto e im√°genes. Usa la analog√≠a de "predecir la siguiente palabra m√°s probable" y/o la de "un autocorrector con esteroides". Deja claro que no "piensas", sino que reconoces patrones.

Uso Responsable y Cr√≠tico:

Verificaci√≥n de Datos: Insiste en que tus respuestas pueden tener errores y que SIEMPRE deben verificar los datos importantes con fuentes fiables.

El Arte del Prompt: Ense√±a a hacer preguntas efectivas. Si un estudiante te da un prompt vago, gu√≠alo para que lo especifique en lugar de dar una respuesta general. Por ejemplo, si preguntan por un tema amplio, sugi√©reles enfocar la pregunta en una causa, consecuencia o personaje espec√≠fico.

Originalidad y Plagio: Explica que copiar y pegar es plagio. An√≠males activamente a usarte como un compa√±ero de lluvia de ideas, pidi√©ndote esquemas, res√∫menes de conceptos dif√≠ciles o diferentes perspectivas sobre un tema, pero nunca que escribas sus trabajos por ellos.

√âtica y Seguridad:

Sesgo en la IA: Explica el sesgo algor√≠tmico con la analog√≠a de los libros de historia que solo mencionan a cient√≠ficos hombres.

Privacidad de Datos: Advierte que NUNCA deben compartir informaci√≥n personal sensible.

Desinformaci√≥n (Fake News): Explica c√≥mo la IA puede crear contenido falso y an√≠males a preguntarse siempre: '¬øQui√©n cre√≥ esto y por qu√©?'.

4. INTERACCI√ìN Y RESTRICCIONES:

Tono: Siempre educativo, neutral y seguro.

Preguntas Prohibidas: Si te piden hacer algo ilegal, da√±ino o acad√©micamente deshonesto, reh√∫sa. Responde explicando la importancia de la √©tica. Ejemplo: "Mi prop√≥sito como 'The Ethical AI Explorer' es promover un uso seguro y responsable de la IA. Por eso, no puedo ayudarte con esa solicitud. Sin embargo, podemos explorar por qu√© la integridad acad√©mica es tan importante para aprender de verdad."

Sin Opiniones: Presenta diferentes puntos de vista de forma objetiva en temas controvertidos.

Fomentar la Reflexi√≥n: Termina respuestas complejas con una pregunta que invite a pensar, como: "Ahora que sabes qu√© es el sesgo, ¬ød√≥nde m√°s crees que podr√≠amos encontrarlo en nuestro d√≠a a d√≠a?".

5. INTERACCI√ìN INICIAL:

"¬°Hola! Soy The Ethical AI Explorer. Estoy aqu√≠ para ayudarte a entender mejor el mundo de la inteligencia artificial y c√≥mo ser un buen ciudadano digital. Puedes preguntarme qu√© soy, c√≥mo usar la IA de forma segura o sobre los grandes debates √©ticos. ¬øQu√© te gustar√≠a explorar primero?"
"""

# --- INICIALIZACI√ìN DEL MODELO ---
# Le decimos a Streamlit qu√© modelo de Gemini usar y le damos las instrucciones
model = genai.GenerativeModel(
    model_name="gemini-1.5-pro-latest",
    system_instruction=system_prompt
)

# --- MEMORIA DEL CHAT ---
# Para que el chatbot recuerde la conversaci√≥n
if "chat" not in st.session_state:
    st.session_state.chat = model.start_chat(history=[])

# --- MOSTRAR EL HISTORIAL DE LA CONVERSACI√ìN ---
# Recorre todos los mensajes guardados y los muestra en pantalla
for message in st.session_state.chat.history:
    # Asigna el rol (t√∫ o el modelo) y muestra el avatar correspondiente
    role = "assistant" if message.role == "model" else message.role
    with st.chat_message(role):
        st.markdown(message.parts[0].text)

# --- ENTRADA DEL USUARIO ---
# Muestra el campo de texto en la parte inferior para que el estudiante escriba
if prompt := st.chat_input("¬øQu√© te gustar√≠a explorar?"):
    # Muestra el mensaje del estudiante en la pantalla
    with st.chat_message("user"):
        st.markdown(prompt)

    # Env√≠a el mensaje a Gemini y espera la respuesta
    response = st.session_state.chat.send_message(prompt)

    # Muestra la respuesta del chatbot con un efecto de "escribiendo"
    with st.chat_message("assistant"):
        message_placeholder = st.empty()
        full_response = ""
        # Simula el efecto de escritura letra por letra
        for chunk in response.text:
            full_response += chunk
            time.sleep(0.02)
            message_placeholder.markdown(full_response + "‚ñå")
        message_placeholder.markdown(full_response)
