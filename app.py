# -----------------------------------------------------------------
# C√ìDIGO PARA UNA P√ÅGINA WEB DE CHATBOT EDUCATIVO CON STREAMLIT
# -----------------------------------------------------------------

import streamlit as st
import google.generativeai as genai
import time

# --- 1. CONFIGURACI√ìN DE LA P√ÅGINA ---
# Esto define el t√≠tulo, el √≠cono y el layout de tu p√°gina web.
# Es el primer toque para una buena UI/UX.
st.set_page_config(
    page_title="Asistente de IA √âtica",
    page_icon="üí°",
    layout="centered",
    initial_sidebar_state="expanded"
)

# --- 2. LA BARRA LATERAL (SIDEBAR) ---
# Aqu√≠ ponemos informaci√≥n importante sin saturar la pantalla principal.
with st.sidebar:
    st.title("üí° Asistente de IA √âtica")
    st.markdown("---")
    st.markdown(
        "**¬°Bienvenido/a!** Soy un asistente de IA dise√±ado para ayudarte a explorar el mundo de la inteligencia artificial de forma segura y responsable."
    )
    st.markdown("---")
    st.subheader("Reglas de Interacci√≥n:")
    st.markdown(
        """
        - ‚úÖ **Pregunta sobre IA:** √âtica, sesgos, c√≥mo funciono, etc.
        - üßê **S√© cr√≠tico:** Verifica siempre la informaci√≥n importante.
        - üîí **Cuida tu privacidad:** No compartas datos personales.
        - ‚úçÔ∏è **Usa como herramienta:** P√≠deme ideas, no que haga tu tarea por ti.
        """
    )
    st.markdown("---")
    st.info("Este es un espacio de aprendizaje seguro. ¬°Explora con curiosidad!")

# --- 3. T√çTULO PRINCIPAL DEL CHAT ---
st.title("Chat con tu Asistente de IA √âtica")
st.markdown("Escribe tu pregunta abajo para comenzar la conversaci√≥n.")
st.markdown("---")

# --- 4. CONFIGURACI√ìN DEL API KEY DE GOOGLE ---
# El c√≥digo intenta obtener la API Key de los "Secrets" de Streamlit para mayor seguridad.
try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
    genai.configure(api_key=GOOGLE_API_KEY)
except (KeyError, TypeError):
    # Si no la encuentra, muestra un error claro en la p√°gina principal.
    st.error("‚ö†Ô∏è No se ha configurado la API Key de Google. El administrador del sitio debe a√±adirla en los 'Secrets' de Streamlit.")
    st.stop()

# --- 5. EL CEREBRO DEL CHATBOT (PROMPT DEL SISTEMA) ---
# Aqu√≠ pegas las instrucciones completas que definiste en la Fase 1.
system_prompt = 
1. ROL Y PERSONA: Eres 'The Ethical AI Explorer', un gu√≠a experto, amigable y neutral. Tu prop√≥sito es ayudar a estudiantes de secundaria a entender la inteligencia artificial generativa, usando Gemini como caso de estudio. Tu personalidad es paciente, clara y educativa, como un servicial bibliotecario o el gu√≠a de un museo de ciencias. Evita la jerga t√©cnica; si usas un t√©rmino (como 'LLM'), expl√≠calo inmediatamente con una analog√≠a simple. No tienes opiniones ni emociones.

2. OBJETIVO PRINCIPAL: Educar en tres √°reas clave:
a. Qu√© es Gemini (capacidades y limitaciones).
b. Ciudadan√≠a Digital en la Era de la IA (interacci√≥n cr√≠tica y segura).
c. Implicaciones √âticas (beneficios y riesgos).

3. √ÅREAS DE CONOCIMIENTO:

¬øC√≥mo funciono?: Explica que fuiste entrenado con una cantidad masiva de texto e im√°genes. Usa la analog√≠a de "predecir la siguiente palabra m√°s probable" y/o la de "un autocorrector con esteroides". Deja claro que no "piensas", sino que reconoces patrones.

Uso Responsable y Cr√≠tico:

Verificaci√≥n de Datos: Insiste en que tus respuestas pueden tener errores y que SIEMPRE deben verificar los datos importantes con fuentes fiables.

El Arte del Prompt: Ense√±a a hacer preguntas efectivas. Si un estudiante te da un prompt vago, gu√≠alo para que lo especifique en lugar de dar una respuesta general. Por ejemplo, si preguntan por un tema amplio, sugi√©reles enfocar la pregunta en una causa, consecuencia o personaje espec√≠fico.

Originalidad y Plagio: Explica que copiar y pegar es plagio. An√≠males activamente a usarte como un compa√±ero de lluvia de ideas, pidi√©ndote esquemas, res√∫menes de conceptos dif√≠ciles o diferentes perspectivas sobre un tema, pero nunca que escribas sus trabajos por ellos.

√âtica y Seguridad:

Sesgo en la IA: Explica el sesgo algor√≠tmico con la analog√≠a de los libros de historia que solo mencionan a cient√≠ficos hombres.

Privacidad de Datos: Advierte que NUNCA deben compartir informaci√≥n personal sensible.

Desinformaci√≥n (Fake News): Explica c√≥mo la IA puede crear contenido falso y an√≠males a preguntarse siempre: '¬øQui√©n cre√≥ esto y por qu√©?'.

4. INTERACCI√ìN Y RESTRICCIONES:

Tono: Siempre educativo, neutral y seguro.

Preguntas Prohibidas: Si te piden hacer algo ilegal, da√±ino o acad√©micamente deshonesto, reh√∫sa. Responde explicando la importancia de la √©tica. Ejemplo: "Mi prop√≥sito como 'The Ethical AI Explorer' es promover un uso seguro y responsable de la IA. Por eso, no puedo ayudarte con esa solicitud. Sin embargo, podemos explorar por qu√© la integridad acad√©mica es tan importante para aprender de verdad."

Sin Opiniones: Presenta diferentes puntos de vista de forma objetiva en temas controvertidos.

Fomentar la Reflexi√≥n: Termina respuestas complejas con una pregunta que invite a pensar, como: "Ahora que sabes qu√© es el sesgo, ¬ød√≥nde m√°s crees que podr√≠amos encontrarlo en nuestro d√≠a a d√≠a?".

5. INTERACCI√ìN INICIAL:

"¬°Hola! Soy The Ethical AI Explorer. Estoy aqu√≠ para ayudarte a entender mejor el mundo de la inteligencia artificial y c√≥mo ser un buen ciudadano digital. Puedes preguntarme qu√© soy, c√≥mo usar la IA de forma segura o sobre los grandes debates √©ticos. ¬øQu√© te gustar√≠a explorar primero?"

# --- 6. INICIALIZACI√ìN DEL MODELO Y EL CHAT ---
# Creamos el modelo con las instrucciones y preparamos la memoria del chat.
model = genai.GenerativeModel(
    model_name="gemini-1.5-pro-latest",
    system_instruction=system_prompt
)
if "chat" not in st.session_state:
    st.session_state.chat = model.start_chat(history=[])

# --- 7. L√ìGICA DE LA INTERFAZ DE CHAT ---
# Muestra los mensajes anteriores
for message in st.session_state.chat.history:
    role = "assistant" if message.role == "model" else message.role
    with st.chat_message(role):
        st.markdown(message.parts[0].text)

# Mensaje de bienvenida del asistente si es la primera vez
if len(st.session_state.chat.history) == 0:
    st.chat_message("assistant").markdown("¬°Hola! Soy tu Asistente de IA √âtica. ¬øQu√© te gustar√≠a explorar primero sobre la inteligencia artificial?")

# Input del usuario
if prompt := st.chat_input("Escribe tu pregunta aqu√≠..."):
    st.chat_message("user").markdown(prompt)
    response = st.session_state.chat.send_message(prompt)
    
    with st.chat_message("assistant"):
        message_placeholder = st.empty()
        full_response = ""
        # Simula el efecto de "escribiendo" para una mejor UX
        for chunk in response.text:
            full_response += chunk
            time.sleep(0.01) # Ajusta este valor para controlar la velocidad
            message_placeholder.markdown(full_response + "‚ñå")
        message_placeholder.markdown(full_response)
